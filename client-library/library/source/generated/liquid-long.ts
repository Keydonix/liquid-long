// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

export type Primitive = 'uint8' | 'uint64' | 'uint256' | 'bool' | 'string' | 'address' | 'bytes20' | 'bytes32' | 'bytes' | 'int256' | 'tuple' | 'address[]' | 'uint256[]' | 'bytes32[]' | 'tuple[]'

export interface AbiParameter {
	name: string,
	type: Primitive,
	components?: Array<AbiParameter>
}

export interface AbiEventParameter extends AbiParameter {
	indexed: boolean,
}

export interface AbiFunction {
	name: string,
	type: 'function' | 'constructor' | 'fallback',
	stateMutability: 'pure' | 'view' | 'payable' | 'nonpayable',
	constant: boolean,
	payable: boolean,
	inputs: Array<AbiParameter>,
	outputs: Array<AbiParameter>,
}

export interface AbiEvent {
	name: string,
	type: 'event',
	inputs: Array<AbiEventParameter>,
	anonymous: boolean,
}

export type Abi = Array<AbiFunction | AbiEvent>

export interface Transaction <TBigNumber> {
	to: string
	from: string
	data: string
	value?: TBigNumber
}

export interface TransactionReceipt {
	status: number
}

export interface Dependencies<TBigNumber> {
	// TODO: get rid of some of these dependencies in favor of baked in solutions
	keccak256(utf8String: string): string
	encodeParams(abi: AbiFunction, parameters: Array<any>): string
	decodeParams(abi: Array<AbiParameter>, encoded: string): Array<any>
	getDefaultAddress(): Promise<string>
	call(transaction: Transaction<TBigNumber>): Promise<string>
	submitTransaction(transaction: Transaction<TBigNumber>): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a localy version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract<TBigNumber> {
	protected readonly dependencies: Dependencies<TBigNumber>
	public readonly address: string

	protected constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		this.dependencies = dependencies
		this.address = address
	}

	private stringifyParams(params: Array<AbiParameter>): Array<string> {
		return params.map(param => {
			if (param.type === 'tuple') {
				if (!param.components) throw new Error(`Expected components when type is ${param.type}`)
				return `(${this.stringifyParams(param.components).join(',')})`
			} else if (param.type === 'tuple[]') {
				if (!param.components) throw new Error(`Expected components when type is ${param.type}`)
				return `(${this.stringifyParams(param.components).join(',')})[]`
			} else {
				return param.type
			}
		})
	}

	private hashSignature(abiFunction: AbiFunction): string {
		const parameters = this.stringifyParams(abiFunction.inputs).join(',')
		const signature = `${abiFunction.name}(${parameters})`
		return this.dependencies.keccak256(signature).substring(0, 10)
	}

	private encodeMethod(abi: AbiFunction, parameters: Array<any>) {
		return `${this.hashSignature(abi)}${this.dependencies.encodeParams(abi, parameters)}`
	}

	protected async localCall(abi: AbiFunction, parameters: Array<any>, sender?: string, attachedEth?: TBigNumber): Promise<any> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {})
		const result = await this.dependencies.call(transaction)
		if (result === '0x') throw new Error(`Call returned '0x' indicating failure.`)
		return this.dependencies.decodeParams(abi.outputs, result)
	}

	protected async remoteCall(abi: AbiFunction, parameters: Array<any>, txName: String, sender?: string, attachedEth?: TBigNumber): Promise<void> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {})
		const transactionReceipt = await this.dependencies.submitTransaction(transaction)
		if (transactionReceipt.status != 1) {
			throw new Error(`Tx ${txName} failed: ${transactionReceipt}`)
		}
	}
}


export class CdpHolder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public returnUnrecognizedCdp = async(cdpId: string, user: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"},{"name":"_user","type":"address"}],"name":"returnUnrecognizedCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cdpId, user], 'returnUnrecognizedCdp', options.sender)
		return
	}

	public returnUnrecognizedCdp_ = async(cdpId: string, user: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"},{"name":"_user","type":"address"}],"name":"returnUnrecognizedCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cdpId, user], options.sender)
	}

	public maker_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"maker","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public renounceOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'renounceOwnership', options.sender)
		return
	}

	public renounceOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public owner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public recordCdpOwnership = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"recordCdpOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cdpId], 'recordCdpOwnership', options.sender)
		return
	}

	public recordCdpOwnership_ = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"recordCdpOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cdpId], options.sender)
	}

	public returnCdp = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"returnCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cdpId], 'returnCdp', options.sender)
		return
	}

	public returnCdp_ = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"returnCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cdpId], options.sender)
	}

	public cdpLastOwner_ = async(arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"cdpLastOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public transferOwnership = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
		return
	}

	public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class Claimable<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public claimOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'claimOwnership', options.sender)
		return
	}

	public claimOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public renounceOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'renounceOwnership', options.sender)
		return
	}

	public renounceOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public owner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public pendingOwner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"pendingOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public transferOwnership = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
		return
	}

	public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class Dai<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public approve = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [spender, value], 'approve', options.sender)
		return
	}

	public approve_ = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
		return
	}

	public transferFrom_ = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async(who: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [who], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [to, value], 'transfer', options.sender)
		return
	}

	public transfer_ = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}
}


export class ERC20<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public approve = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [spender, value], 'approve', options.sender)
		return
	}

	public approve_ = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
		return
	}

	public transferFrom_ = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async(who: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [who], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [to, value], 'transfer', options.sender)
		return
	}

	public transfer_ = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}
}


export class ERC20Basic<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public totalSupply_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public balanceOf_ = async(who: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [who], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [to, value], 'transfer', options.sender)
		return
	}

	public transfer_ = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}
}


export class LiquidLong<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public totalPayments_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalPayments","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getCdps = async(user: string, offset: TBigNumber, pageSize: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_user","type":"address"},{"name":"_offset","type":"uint256"},{"name":"_pageSize","type":"uint256"}],"name":"getCdps","outputs":[{"components":[{"name":"id","type":"uint256"},{"name":"debtInAttodai","type":"uint256"},{"name":"lockedAttoeth","type":"uint256"},{"name":"feeInAttoeth","type":"uint256"},{"name":"liquidationCostInAttoeth","type":"uint256"},{"name":"liquidatableDebtInAttodai","type":"uint256"},{"name":"liquidationCostAtFeedPriceInAttoeth","type":"uint256"},{"name":"userOwned","type":"bool"}],"name":"_cdps","type":"tuple[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [user, offset, pageSize], 'getCdps', options.sender)
		return
	}

	public getCdps_ = async(user: string, offset: TBigNumber, pageSize: TBigNumber, options?: { sender?: string }): Promise<Array<{ id: TBigNumber, debtInAttodai: TBigNumber, lockedAttoeth: TBigNumber, feeInAttoeth: TBigNumber, liquidationCostInAttoeth: TBigNumber, liquidatableDebtInAttodai: TBigNumber, liquidationCostAtFeedPriceInAttoeth: TBigNumber, userOwned: boolean }>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_user","type":"address"},{"name":"_offset","type":"uint256"},{"name":"_pageSize","type":"uint256"}],"name":"getCdps","outputs":[{"components":[{"name":"id","type":"uint256"},{"name":"debtInAttodai","type":"uint256"},{"name":"lockedAttoeth","type":"uint256"},{"name":"feeInAttoeth","type":"uint256"},{"name":"liquidationCostInAttoeth","type":"uint256"},{"name":"liquidatableDebtInAttodai","type":"uint256"},{"name":"liquidationCostAtFeedPriceInAttoeth","type":"uint256"},{"name":"userOwned","type":"bool"}],"name":"_cdps","type":"tuple[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [user, offset, pageSize], options.sender)
		return <Array<{ id: TBigNumber, debtInAttodai: TBigNumber, lockedAttoeth: TBigNumber, feeInAttoeth: TBigNumber, liquidationCostInAttoeth: TBigNumber, liquidatableDebtInAttodai: TBigNumber, liquidationCostAtFeedPriceInAttoeth: TBigNumber, userOwned: boolean }>>result[0]
	}

	public closeCdp = async(cdpId: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"closeCdp","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		await this.remoteCall(abi, [cdpId], 'closeCdp', options.sender, options.attachedEth)
		return
	}

	public closeCdp_ = async(cdpId: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"closeCdp","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [cdpId], options.sender, options.attachedEth)
		return <TBigNumber>result[0]
	}

	public getPayPriceAndAmount_ = async(payGem: string, buyGem: string, payDesiredAmount: TBigNumber, options?: { sender?: string }): Promise<{_paidAmount: TBigNumber, _boughtAmount: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payGem","type":"address"},{"name":"_buyGem","type":"address"},{"name":"_payDesiredAmount","type":"uint256"}],"name":"getPayPriceAndAmount","outputs":[{"name":"_paidAmount","type":"uint256"},{"name":"_boughtAmount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payGem, buyGem, payDesiredAmount], options.sender)
		return <{_paidAmount: TBigNumber, _boughtAmount: TBigNumber}>result
	}

	public wethDeposit = async(options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"wethDeposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.remoteCall(abi, [], 'wethDeposit', options.sender, options.attachedEth)
		return
	}

	public wethDeposit_ = async(options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"wethDeposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [], options.sender, options.attachedEth)
	}

	public unpause = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'unpause', options.sender)
		return
	}

	public unpause_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public estimateDaiPurchaseCosts_ = async(attodaiToBuy: TBigNumber, options?: { sender?: string }): Promise<{_wethPaid: TBigNumber, _daiBought: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_attodaiToBuy","type":"uint256"}],"name":"estimateDaiPurchaseCosts","outputs":[{"name":"_wethPaid","type":"uint256"},{"name":"_daiBought","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [attodaiToBuy], options.sender)
		return <{_wethPaid: TBigNumber, _daiBought: TBigNumber}>result
	}

	public weth_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"weth","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getVolumeAtPrice_ = async(payGem: string, buyGem: string, payAmount: TBigNumber, buyAmount: TBigNumber, options?: { sender?: string }): Promise<{_paidAmount: TBigNumber, _boughtAmount: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payGem","type":"address"},{"name":"_buyGem","type":"address"},{"name":"_payAmount","type":"uint256"},{"name":"_buyAmount","type":"uint256"}],"name":"getVolumeAtPrice","outputs":[{"name":"_paidAmount","type":"uint256"},{"name":"_boughtAmount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payGem, buyGem, payAmount, buyAmount], options.sender)
		return <{_paidAmount: TBigNumber, _boughtAmount: TBigNumber}>result
	}

	public returnUnrecognizedCdp = async(cdpId: string, user: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"},{"name":"_user","type":"address"}],"name":"returnUnrecognizedCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cdpId, user], 'returnUnrecognizedCdp', options.sender)
		return
	}

	public returnUnrecognizedCdp_ = async(cdpId: string, user: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"},{"name":"_user","type":"address"}],"name":"returnUnrecognizedCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cdpId, user], options.sender)
	}

	public claimOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'claimOwnership', options.sender)
		return
	}

	public claimOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public maker_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"maker","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public estimateDaiSaleProceeds_ = async(attodaiToSell: TBigNumber, options?: { sender?: string }): Promise<{_daiPaid: TBigNumber, _wethBought: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_attodaiToSell","type":"uint256"}],"name":"estimateDaiSaleProceeds","outputs":[{"name":"_daiPaid","type":"uint256"},{"name":"_wethBought","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [attodaiToSell], options.sender)
		return <{_daiPaid: TBigNumber, _wethBought: TBigNumber}>result
	}

	public paused_ = async(options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public withdrawPayments = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawPayments","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'withdrawPayments', options.sender)
		return
	}

	public withdrawPayments_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawPayments","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public ethPriceInUsd_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ethPriceInUsd","outputs":[{"name":"_attousd","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public renounceOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'renounceOwnership', options.sender)
		return
	}

	public renounceOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public getBuyPriceAndAmount_ = async(payGem: string, buyGem: string, buyDesiredAmount: TBigNumber, options?: { sender?: string }): Promise<{_paidAmount: TBigNumber, _boughtAmount: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payGem","type":"address"},{"name":"_buyGem","type":"address"},{"name":"_buyDesiredAmount","type":"uint256"}],"name":"getBuyPriceAndAmount","outputs":[{"name":"_paidAmount","type":"uint256"},{"name":"_boughtAmount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payGem, buyGem, buyDesiredAmount], options.sender)
		return <{_paidAmount: TBigNumber, _boughtAmount: TBigNumber}>result
	}

	public openCdp = async(leverage: TBigNumber, leverageSizeInAttoeth: TBigNumber, allowedFeeInAttoeth: TBigNumber, affiliateFeeInAttoeth: TBigNumber, affiliateAddress: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_leverage","type":"uint256"},{"name":"_leverageSizeInAttoeth","type":"uint256"},{"name":"_allowedFeeInAttoeth","type":"uint256"},{"name":"_affiliateFeeInAttoeth","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"openCdp","outputs":[{"name":"_cdpId","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"}
		await this.remoteCall(abi, [leverage, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress], 'openCdp', options.sender, options.attachedEth)
		return
	}

	public openCdp_ = async(leverage: TBigNumber, leverageSizeInAttoeth: TBigNumber, allowedFeeInAttoeth: TBigNumber, affiliateFeeInAttoeth: TBigNumber, affiliateAddress: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_leverage","type":"uint256"},{"name":"_leverageSizeInAttoeth","type":"uint256"},{"name":"_allowedFeeInAttoeth","type":"uint256"},{"name":"_affiliateFeeInAttoeth","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"openCdp","outputs":[{"name":"_cdpId","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [leverage, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress], options.sender, options.attachedEth)
		return <string>result[0]
	}

	public peth_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"peth","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public mkr_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"mkr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public pause = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'pause', options.sender)
		return
	}

	public pause_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public owner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public wethWithdraw = async(amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"wethWithdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [amount], 'wethWithdraw', options.sender)
		return
	}

	public wethWithdraw_ = async(amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"wethWithdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [amount], options.sender)
	}

	public recordCdpOwnership = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"recordCdpOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cdpId], 'recordCdpOwnership', options.sender)
		return
	}

	public recordCdpOwnership_ = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"recordCdpOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cdpId], options.sender)
	}

	public oasis_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"oasis","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public returnCdp = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"returnCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cdpId], 'returnCdp', options.sender)
		return
	}

	public returnCdp_ = async(cdpId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_cdpId","type":"bytes32"}],"name":"returnCdp","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cdpId], options.sender)
	}

	public cdpLastOwner_ = async(arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"cdpLastOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public payments_ = async(arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"payments","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public pendingOwner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"pendingOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cdpCount_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cdpCount","outputs":[{"name":"_cdpCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferOwnership = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
		return
	}

	public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}

	public dai_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"dai","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public providerFeePerEth_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"providerFeePerEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class Maker<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public join = async(wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [wad], 'join', options.sender)
		return
	}

	public join_ = async(wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [wad], options.sender)
	}

	public skr_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"skr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public gov_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"gov","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public ink = async(cup: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"}],"name":"ink","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup], 'ink', options.sender)
		return
	}

	public ink_ = async(cup: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"}],"name":"ink","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [cup], options.sender)
		return <TBigNumber>result[0]
	}

	public draw = async(cup: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"wad","type":"uint256"}],"name":"draw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup, wad], 'draw', options.sender)
		return
	}

	public draw_ = async(cup: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"wad","type":"uint256"}],"name":"draw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cup, wad], options.sender)
	}

	public cupi_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cupi","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public gap_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"gap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public rap = async(cup: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"}],"name":"rap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup], 'rap', options.sender)
		return
	}

	public rap_ = async(cup: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"}],"name":"rap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [cup], options.sender)
		return <TBigNumber>result[0]
	}

	public wipe = async(cup: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"wad","type":"uint256"}],"name":"wipe","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup, wad], 'wipe', options.sender)
		return
	}

	public wipe_ = async(cup: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"wad","type":"uint256"}],"name":"wipe","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cup, wad], options.sender)
	}

	public gem_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"gem","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public per_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"per","outputs":[{"name":"ray","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public sai_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"sai","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public lock = async(cup: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"wad","type":"uint256"}],"name":"lock","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup, wad], 'lock', options.sender)
		return
	}

	public lock_ = async(cup: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"wad","type":"uint256"}],"name":"lock","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cup, wad], options.sender)
	}

	public give = async(cup: string, guy: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"guy","type":"address"}],"name":"give","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup, guy], 'give', options.sender)
		return
	}

	public give_ = async(cup: string, guy: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"},{"name":"guy","type":"address"}],"name":"give","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [cup, guy], options.sender)
	}

	public chi = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"chi","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'chi', options.sender)
		return
	}

	public chi_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"chi","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public pip_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"pip","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public lad_ = async(cup: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"cup","type":"bytes32"}],"name":"lad","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [cup], options.sender)
		return <string>result[0]
	}

	public tab = async(cup: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"}],"name":"tab","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [cup], 'tab', options.sender)
		return
	}

	public tab_ = async(cup: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cup","type":"bytes32"}],"name":"tab","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [cup], options.sender)
		return <TBigNumber>result[0]
	}

	public open = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"open","outputs":[{"name":"cup","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'open', options.sender)
		return
	}

	public open_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"open","outputs":[{"name":"cup","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cups_ = async(arg0: string, options?: { sender?: string }): Promise<{lad: string, ink: TBigNumber, art: TBigNumber, ire: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"cups","outputs":[{"name":"lad","type":"address"},{"name":"ink","type":"uint256"},{"name":"art","type":"uint256"},{"name":"ire","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <{lad: string, ink: TBigNumber, art: TBigNumber, ire: TBigNumber}>result
	}
}


export class Medianizer<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public read_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"read","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class Mkr<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public approve = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [spender, value], 'approve', options.sender)
		return
	}

	public approve_ = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
		return
	}

	public transferFrom_ = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async(who: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [who], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [to, value], 'transfer', options.sender)
		return
	}

	public transfer_ = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}
}


export class Oasis<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getBestOffer_ = async(sell_gem: string, buy_gem: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"sell_gem","type":"address"},{"name":"buy_gem","type":"address"}],"name":"getBestOffer","outputs":[{"name":"offerId","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [sell_gem, buy_gem], options.sender)
		return <TBigNumber>result[0]
	}

	public sellAllAmount = async(pay_gem: string, pay_amt: TBigNumber, buy_gem: string, min_fill_amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"pay_gem","type":"address"},{"name":"pay_amt","type":"uint256"},{"name":"buy_gem","type":"address"},{"name":"min_fill_amount","type":"uint256"}],"name":"sellAllAmount","outputs":[{"name":"fill_amt","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [pay_gem, pay_amt, buy_gem, min_fill_amount], 'sellAllAmount', options.sender)
		return
	}

	public sellAllAmount_ = async(pay_gem: string, pay_amt: TBigNumber, buy_gem: string, min_fill_amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"pay_gem","type":"address"},{"name":"pay_amt","type":"uint256"},{"name":"buy_gem","type":"address"},{"name":"min_fill_amount","type":"uint256"}],"name":"sellAllAmount","outputs":[{"name":"fill_amt","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [pay_gem, pay_amt, buy_gem, min_fill_amount], options.sender)
		return <TBigNumber>result[0]
	}

	public getBuyAmount_ = async(tokenToBuy: string, tokenToPay: string, amountToPay: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenToBuy","type":"address"},{"name":"tokenToPay","type":"address"},{"name":"amountToPay","type":"uint256"}],"name":"getBuyAmount","outputs":[{"name":"amountBought","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenToBuy, tokenToPay, amountToPay], options.sender)
		return <TBigNumber>result[0]
	}

	public getOffer_ = async(id: TBigNumber, options?: { sender?: string }): Promise<{pay_amt: TBigNumber, pay_gem: string, buy_amt: TBigNumber, buy_gem: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getOffer","outputs":[{"name":"pay_amt","type":"uint256"},{"name":"pay_gem","type":"address"},{"name":"buy_amt","type":"uint256"},{"name":"buy_gem","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [id], options.sender)
		return <{pay_amt: TBigNumber, pay_gem: string, buy_amt: TBigNumber, buy_gem: string}>result
	}

	public getWorseOffer_ = async(id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getWorseOffer","outputs":[{"name":"offerId","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [id], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayAmount_ = async(tokenToPay: string, tokenToBuy: string, amountToBuy: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenToPay","type":"address"},{"name":"tokenToBuy","type":"address"},{"name":"amountToBuy","type":"uint256"}],"name":"getPayAmount","outputs":[{"name":"amountPaid","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenToPay, tokenToBuy, amountToBuy], options.sender)
		return <TBigNumber>result[0]
	}
}


export class Ownable<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public renounceOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'renounceOwnership', options.sender)
		return
	}

	public renounceOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public owner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public transferOwnership = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
		return
	}

	public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class Pausable<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public unpause = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'unpause', options.sender)
		return
	}

	public unpause_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public paused_ = async(options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public renounceOwnership = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'renounceOwnership', options.sender)
		return
	}

	public renounceOwnership_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public pause = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'pause', options.sender)
		return
	}

	public pause_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public owner_ = async(options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public transferOwnership = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
		return
	}

	public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class Peth<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public approve = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [spender, value], 'approve', options.sender)
		return
	}

	public approve_ = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
		return
	}

	public transferFrom_ = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async(who: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [who], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [to, value], 'transfer', options.sender)
		return
	}

	public transfer_ = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}
}


export class PullPayment<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public totalPayments_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalPayments","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public withdrawPayments = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawPayments","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [], 'withdrawPayments', options.sender)
		return
	}

	public withdrawPayments_ = async(options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawPayments","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public payments_ = async(arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"payments","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}
}


export class Weth<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public approve = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [spender, value], 'approve', options.sender)
		return
	}

	public approve_ = async(spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async(options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
		return
	}

	public transferFrom_ = async(from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public withdraw = async(wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [wad], 'withdraw', options.sender)
		return
	}

	public withdraw_ = async(wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [wad], options.sender)
	}

	public balanceOf_ = async(who: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [who], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.remoteCall(abi, [to, value], 'transfer', options.sender)
		return
	}

	public transfer_ = async(to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public deposit = async(options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.remoteCall(abi, [], 'deposit', options.sender, options.attachedEth)
		return
	}

	public deposit_ = async(options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [], options.sender, options.attachedEth)
	}

	public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}
}

